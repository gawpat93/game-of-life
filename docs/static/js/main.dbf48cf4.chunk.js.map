{"version":3,"sources":["tools.js","components/Canvas.js","App.js","serviceWorker.js","index.js"],"names":["generate2dArray","maxX","maxY","customValue","table","i","tmpRow","j","undefined","random","Math","push","round","calculateNeighboursSum","neighbours","length","Canvas","props","useState","step","start","aliveHistory","state","setState","alive","reduce","a","b","concat","useEffect","interval","setInterval","setTable","initialTable","tmp","row","calculateNextStepTable","clearInterval","data","labels","Array","from","keys","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","className","map","y","y_index","key","x","x_index","onClick","console","log","changeCellValue","Card","variant","CardContent","Button","color","options","title","display","text","fontSize","legend","scales","yAxes","stacked","Typography","gutterBottom","component","max","min","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dbf48cf4.chunk.js","sourcesContent":["export const generate2dArray = (maxX, maxY, customValue) => {\r\n  let table = [];\r\n  for (var i = 0; i < maxX; i++) {\r\n    let tmpRow = [];\r\n    for (var j = 0; j < maxY; j++) {\r\n      if (customValue === undefined) {\r\n        let random = Math.random();\r\n        tmpRow.push(Math.round(random));\r\n      } else {\r\n        tmpRow.push(customValue);\r\n      }\r\n    }\r\n    table.push(tmpRow);\r\n  }\r\n\r\n  return table;\r\n};\r\n\r\nexport const calculateNeighboursSum = (table, i, j) => {\r\n  let neighbours = 0;\r\n\r\n  if (i > 0 && j > 0) {\r\n    neighbours += table[i - 1][j - 1];\r\n  }\r\n  if (i > 0) {\r\n    neighbours += table[i - 1][j];\r\n  }\r\n\r\n  if (i > 0 && j < table[i - 1].length - 1) {\r\n    neighbours += table[i - 1][j + 1];\r\n  }\r\n\r\n  if (j > 0) {\r\n    neighbours += table[i][j - 1];\r\n  }\r\n\r\n  if (j < table[i].length - 1) {\r\n    neighbours += table[i][j + 1];\r\n  }\r\n\r\n  if (i < table.length - 1 && j > 0) {\r\n    neighbours += table[i + 1][j - 1];\r\n  }\r\n  if (i < table.length - 1) {\r\n    neighbours += table[i + 1][j];\r\n  }\r\n\r\n  if (i < table.length - 1 && j < table[i + 1].length - 1) {\r\n    neighbours += table[i + 1][j + 1];\r\n  }\r\n\r\n  return neighbours;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Canvas.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { calculateNeighboursSum, generate2dArray } from \"../tools\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nlet calculateNextStepTable = (table, setTable) => {\r\n  let initialTable = table;\r\n  //Any live cell with two or three live neighbours survives.\r\n  //Any dead cell with three live neighbours becomes a live cell.\r\n  //All other live cells die in the next generation. Similarly, all other dead cells stay dead.\r\n  let tmp = [];\r\n  for (var i = 0; i < initialTable.length; i++) {\r\n    let row = [];\r\n    for (var j = 0; j < initialTable[i].length; j++) {\r\n      let alive = initialTable[i][j] === 1;\r\n      let neighbours = calculateNeighboursSum(initialTable, i, j);\r\n\r\n      if (alive) {\r\n        if (neighbours < 2 || neighbours > 3) {\r\n          alive = false;\r\n        }\r\n      } else {\r\n        if (neighbours === 3) {\r\n          alive = true;\r\n        }\r\n      }\r\n      row.push(alive ? 1 : 0);\r\n    }\r\n    tmp.push(row);\r\n  }\r\n  setTable(tmp);\r\n};\r\n\r\nconst Canvas = (props) => {\r\n  const [state, setState] = useState({\r\n    table: props.table,\r\n    step: 0,\r\n    start: false,\r\n    aliveHistory: [],\r\n  });\r\n  let alive = state.table.reduce((a, b) => a.concat(b)).reduce((a, b) => a + b);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      state.start &&\r\n        calculateNextStepTable(state.table, (table) =>\r\n          setState({\r\n            ...state,\r\n            table: table,\r\n            step: state.step + 1,\r\n            aliveHistory: [...state.aliveHistory, alive],\r\n          })\r\n        );\r\n    }, 1000 * 0.6);\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  });\r\n\r\n  const resetSimulation = () => {\r\n    setState({\r\n      step: 0,\r\n      start: false,\r\n      table: generate2dArray(64, 64),\r\n      aliveHistory: [],\r\n    });\r\n  };\r\n\r\n  const clearCanvas = () => {\r\n    setState({\r\n      step: 0,\r\n      start: false,\r\n      table: generate2dArray(64, 64, 0),\r\n      aliveHistory: [],\r\n    });\r\n  };\r\n\r\n  const changeCellValue = (x, y) => {\r\n    let table = state.table;\r\n    table[x][y] = state.table[x][y] === 0 ? 1 : 0;\r\n    setState({ ...state, table });\r\n    console.log(x, y, table);\r\n  };\r\n\r\n  const data = {\r\n    labels: Array.from(\r\n      Array(\r\n        state.aliveHistory.length > 0 ? state.aliveHistory.length : 1\r\n      ).keys()\r\n    ),\r\n    datasets: [\r\n      {\r\n        label: \"Alive\",\r\n        fill: false,\r\n        lineTension: 0.5,\r\n        backgroundColor: \"rgba(75,192,192,1)\",\r\n        borderColor: \"rgba(0,0,0,1)\",\r\n        borderWidth: 2,\r\n        data: state.aliveHistory.length > 0 ? state.aliveHistory : [alive],\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"canvas\">\r\n        <div className=\"table\">\r\n          {state.table.map((y, y_index) => (\r\n            <div className=\"row\" key={y_index}>\r\n              {y.map((x, x_index) => (\r\n                <div\r\n                  className={x === 1 ? \"coll alive\" : \"coll\"}\r\n                  key={x_index}\r\n                  onClick={() => changeCellValue(y_index, x_index)}\r\n                ></div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"menu\">\r\n        <h1 className=\"App-title\">Game of Life</h1>\r\n        <Card className=\"info-card\" variant=\"elevation\">\r\n          <CardContent>\r\n            <div>Step: {state.step}</div>\r\n            <div>Alive: {alive}</div>\r\n            <Button\r\n              color=\"secondary\"\r\n              onClick={() => setState({ ...state, start: !state.start })}\r\n            >\r\n              {state.start ? \"stop\" : \"Start\"}\r\n            </Button>\r\n            <Button color=\"secondary\" onClick={resetSimulation}>\r\n              Reset\r\n            </Button>\r\n            <Button color=\"secondary\" onClick={clearCanvas}>\r\n              Clear\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n        <Card className=\"info-card\" variant=\"elevation\">\r\n          <CardContent>\r\n            <Line\r\n              data={data}\r\n              options={{\r\n                title: {\r\n                  display: true,\r\n                  text: \"Alive history\",\r\n                  fontSize: 20,\r\n                },\r\n                legend: {\r\n                  display: false,\r\n                },\r\n                scales: {\r\n                  yAxes: [\r\n                    {\r\n                      stacked: true,\r\n                    },\r\n                  ],\r\n                },\r\n              }}\r\n            />\r\n          </CardContent>\r\n        </Card>\r\n        <Card className=\"info-card\" variant=\"elevation\">\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Statistics\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Max alive:{\" \"}\r\n              {state.aliveHistory.length > 0\r\n                ? Math.max(...state.aliveHistory)\r\n                : alive}\r\n              <br />\r\n              Min alive:{\" \"}\r\n              {state.aliveHistory.length > 0\r\n                ? Math.min(...state.aliveHistory)\r\n                : alive}\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Canvas from \"./components/Canvas\";\r\nimport { generate2dArray } from \"./tools\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Canvas table={generate2dArray(64, 64)} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}